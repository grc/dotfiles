;;  -*- mode: lisp -*-


(in-package :stumpwm)

(set-prefix-key (kbd "C-z"))

;; By default arrow keys move focus, but I frequently have the Ctrl
;; key held down at the time

(define-key *root-map* (kbd "C-Left") "move-focus left")
(define-key *root-map* (kbd "C-Right") "move-focus right")
(define-key *root-map* (kbd "C-Up") "move-focus up")
(define-key *root-map* (kbd "C-Down") "move-focus down")


(setf *mouse-focus-policy* :click)



(run-shell-command "xsetroot -solid DarkSlateBlue")
(run-shell-command "xsetroot -cursor_name left_ptr")



(set-focus-color   "gold1")
(setf *mode-line-foreground-color* "green")
(set-unfocus-color "white")
(set-normal-gravity :center)


; Set an unadorned F11 to toggle full screen of current window
(define-key *top-map* (kbd "F11") "fullscreen")


(define-key *root-map* (kbd "c") "exec uxterm")
(define-key *root-map* (kbd "C-c") "exec uxterm")

;; Stumpwm & slime integratoion
(ql:quickload "swank")
(ql:quickload "quicklisp-slime-helper")
(require 'swank)
(defcommand swank () ()
	    (setf stumpwm:*top-level-error-action* :break)
	    (swank:create-server :port 4005
				 :style swank:*communication-style*
				 :dont-close t)
	    (echo-string (current-screen) 
			 "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))






(defun networksetup-ip (device)
  "Returns the IP address of device if present, nil otherwise"
  (let (( ip (string-right-trim
           '(#\Newline)
           (run-shell-command
            (concatenate 'string "networksetup -getinfo \""
                         device
                         "\"| awk '/^IP address:/ {print $3}' " ) t ))))
    (if (> (length ip) 0)
        ip
        nil)))

(defun wifi-ip ()
  (networksetup-ip "WiFi"))



(defun wifi-ssid ()
  "OSX specific wifi ssid command.
Returns nil if not connected to any network"
  (let ((ssid (string-right-trim
               '(#\Newline)
               (stumpwm:run-shell-command "airport --getinfo | awk '/ SSID/{print $2}'" t))))
    (if (> (length ssid) 0)
        ssid
        nil)))

;;; Wi-Fi mode line status
;;; Currently hardwired for OSX
(defparameter *known-wifi-networks*
  '("sjld" "wiremore")
  "List of expected wifi networks, connection to which will not be of concern.")


(defun wifi-info ()
  "Return a string containing SSID and IP address.  

String is colour coded to warn of unknown or missing networks"
  (let* ((ssid (wifi-ssid))
         (info (concatenate 'string ssid ":" (wifi-ip))))
    (cond
      ((not ssid) (concatenate 'string *bar-crit-color* "No wifi" "^n "))
      ((find ssid *known-wifi-networks* :test #'string=) info)
      (t (concatenate 'string *bar-hi-color* info "^n ")))))
  

(defun usb-ip ()
  "Returns the USB Ethernet IP address if available"
  (networksetup-ip "USB Ethernet"))



(defun network-status ()
  "Returns a string representing the status of the primary network connection"
  (some #'identity (list (usb-ip) (wifi-info))))



;; Battery status

(defun battery ()
  (parse-integer (stumpwm:run-shell-command  "/Users/grc/bin/grc-battery" t)))

(defun battery-level-string ()
  "Battery level indication, coloured for use in mode line"
  (let* ((bat-level (battery))
	 (color-code (bar-zone-color bat-level 50 20 10 t)))
    (format nil "Battery: ~A~A%" color-code bat-level)))


;; Set up the mode line

(setf *mode-line-timeout* 60)

(defun fmt-bat (ml)
  (battery-level-string))

(defun fmt-network (ml)
  (network-status))

(add-screen-mode-line-formatter #\B #'fmt-bat)
(add-screen-mode-line-formatter #\W #'fmt-network)

(setf stumpwm:*screen-mode-line-format*
      (list "%w | %W %B" ))

(mode-line)


(run-commands "gnewbg web")

(define-frame-preference "web"
    ;; frame raise lock (lock AND raise == jumpto)
    (0 t   t :class "Conkeror"))
